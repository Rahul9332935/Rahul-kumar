Q1).Runnable VS Callable Threads

In Java, Runnable and Callable are both interfaces that can be used to create threads. However, there are some key differences between them:

Runnable: The Runnable interface has a single method called "run()" that takes no arguments and returns void. This method contains the code 
that will be executed by the thread. When a class implements the Runnable interface, it must provide an implementation of the "run()" method.

Callable: The Callable interface also has a single method called "call()" that takes no arguments but returns a generic type (e.g. Integer, 
String, etc.). Like the "run()" method, the "call()" method contains the code that will be executed by the thread. However, the "call()" 
method can also return a value, which can be used for tasks that need to return a result.

Execution: A Runnable object can be passed to a Thread object's constructor, and the thread will start executing the run() method when the 
start() method is called on the Thread object. A Callable object can be passed to a ExecutorService object's submit() method, and the task
will be executed asynchronously and the returned result can be accessed through the Future object.

Exception Handling: The Runnable interface doesn't throw any checked exceptions, while the Callable interface throws Exception.

In summary, Runnable is a simple interface for creating threads that do not return a value, while Callable allows for more complex threading 
tasks that can return a value and handle exceptions.

Q2).Different between final, finally, and finalize in java ?

  In Java, "final" is a keyword that can be used in several different ways:

  When applied to a variable, "final" means that the variable's value cannot be changed after it is initialized.

  When applied to a method, "final" means that the method cannot be overridden by a subclass.

  When applied to a class, "final" means that the class cannot be subclassed.

 "finally" is used in the context of exception handling, and is used to specify a block of code that will be executed regardless of           whether an exception is thrown or caught.

  "finalize" is a method that can be overridden in a class, and is called by the garbage collector before an object is garbage collected.     It is typically used to perform cleanup actions on an object before it is removed from memory.



Regenerate response
